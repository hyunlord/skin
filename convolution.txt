package opencv2;

import java.util.ArrayList;
import java.util.Random;

import org.opencv.core.Mat;

public class convolution 
{
	private final static int INPUT_SIZE = 400;		// 입력수
	private final static int FILTER_SIZE = 3;		// 필터의 크기
	private final static int FILTER_NO = 2;			// 필터 개수
	private final static int POOL_SIZE = 3;			// 풀링 크기
	private final static int POOL_OUT_SIZE = 20;		// 풀링 출력 크기
	private final static int MAX_INPUT_NO = 100;  	// 학습 데이터 최대 개수
	private final static double LIMIT = 0.01;		// 오차 상한값
	private final static int BIG_NUM = 100;			// 오차 초깃값
	private final static int HIDDEN_NO = 3;			// 중간층 셀 개수
	private final static int ALPHA = 10;			// 학습 계수
	
	public void test(ArrayList<Mat> input, int[] index)
	{
		double[][][] filter = new double[FILTER_NO][FILTER_SIZE][FILTER_SIZE]; 					// 필터
		double[][][] e = new double[MAX_INPUT_NO][INPUT_SIZE][INPUT_SIZE]; 						// 입력 데이터
		int[] t = new int[MAX_INPUT_NO]; 														// 교사 데이터
		double[][] convOut = new double[INPUT_SIZE][INPUT_SIZE]; 								// 합성곱 출력
		double[][] poolOut = new double[POOL_OUT_SIZE][POOL_OUT_SIZE]; 							// 출력 데이터
		int n_of_e; 																			// 학습 데이터 개수
		double err = BIG_NUM; 																	// 오차 평가
		int count = 0; 																			// 반복 횟수 카운터
		double[] ef = new double[POOL_OUT_SIZE * POOL_OUT_SIZE * FILTER_NO + 1]; 				// 전결합층으로의 입력 데이터
		double o; 																				// 최종 출력
		double[] hi = new double[HIDDEN_NO + 1]; 												// 중간층 출력
		double[][] wh = new double[HIDDEN_NO][POOL_OUT_SIZE * POOL_OUT_SIZE * FILTER_NO + 1]; 	// 중간층 가중치
		double[] wo = new double[HIDDEN_NO + 1]; 												// 출력층 가중치

		// 필터 초기화
		initFilter(filter);
		
		// 전결합층 가중치 초기화
		initWh(wh); // 중간층 가중치 초기화
		initWo(wo); // 출력층 가중치 초기화
		
		// 입력 데이터 읽어들이기
		n_of_e = getData(e, t, input, index);
		// showData(e, t, n_of_e);
		
		// 학습
		while(err > LIMIT)
		{
			err = 0.0;
			for(int i=0; i<n_of_e; i++) // 학습 데이터마다 반복
			{
				for(int j=0; j<FILTER_NO; j++) // 필터마다 반복
				{
					// 합성곱 계산
					conv(filter[j], e[i], convOut);
					
					// 풀링 계산
					pool(convOut, poolOut);
					
					// 풀링 출력을 전결합층 입력으로 복사
					for (int m=0; m<POOL_OUT_SIZE; m++)
						for(int n=0; n<POOL_OUT_SIZE; n++)
							ef[j * POOL_OUT_SIZE * POOL_OUT_SIZE + POOL_OUT_SIZE * m + n] = poolOut[m][n];
					ef[POOL_OUT_SIZE * POOL_OUT_SIZE * FILTER_NO] = t[i]; // 교사 데이터
				}
				
				// 순방향 계산
				o = forward(wh, wo, hi, ef);
				
				// 출력층 가중치 조정
				oLearn(wo, hi, ef, o);
				
				// 중간층 가중치 조정
				hLearn(wh, wo, hi, ef, o);
				
				// 오차 계산
				err += (o - t[i]) * (o - t[i]);
			}
			count++;
			
			// 오차 출력
			System.out.println(count + "\t" + err);
		}   // 학습 종료
		
		System.out.println("\n***Results***");
		
		// 결합 하중 출력
		System.out.println("Weights");
		print(wh, wo);
		
		// 교사 데이터에 대한 출력
		System.out.println("Network Output");
		System.out.println("#\tteacher\toutput");
		for(int i=0; i<n_of_e; i++)
		{
			System.out.println(i + "\t" + t[i]);
			for(int j=0; j<FILTER_NO; j++) // 필터마다 반복
			{
				// 합성곱 계산
				conv(filter[j], e[i], convOut);
				
				// 풀링 계산
				pool(convOut, poolOut);
				
				// 풀링 출력을 전결합층 입력으로 복사
				for (int m=0; m<POOL_OUT_SIZE; m++)
					for(int n=0; n<POOL_OUT_SIZE; n++)
						ef[j * POOL_OUT_SIZE * POOL_OUT_SIZE + POOL_OUT_SIZE * m + n] = poolOut[m][n];
				ef[POOL_OUT_SIZE * POOL_OUT_SIZE * FILTER_NO] = t[i]; // 교사 데이터
			}
			o = forward(wh, wo, hi, ef);
			System.out.println(o);
		}
	} 
	
	// 합성곱 계산
	public void conv(double filter[][], double e[][], double convOut[][])
	{
		int startPoint = FILTER_SIZE / 2; // 합성곱 범위 하한
		
		for(int i=startPoint; i<INPUT_SIZE - startPoint; i++)
			for(int j=startPoint; j<INPUT_SIZE - startPoint; j++)
				convOut[i][j] = calcConv(filter, e, i, j);
	}
	
	// 필터 적용
	public double calcConv(double filter[][], double e[][], int i, int j)
	{
		double sum = 0; // 합계 값
		for(int m=0; m<FILTER_SIZE; m++)
			for(int n=0; n<FILTER_SIZE; n++)
				sum += e[i - FILTER_SIZE / 2 + m][j - FILTER_SIZE / 2 + n] * filter[m][n];
		return sum;
	}
	
	// 풀링 계산
	public void pool(double convOut[][], double poolOut[][])
	{
		for(int i=0; i<POOL_OUT_SIZE; i++)
			for(int j=0; j<POOL_OUT_SIZE; j++)
				poolOut[i][j] = maxPooling(convOut, i, j);
	}
	
	// 최댓값 풀링
	public double maxPooling(double convOut[][], int i, int j)
	{
		double max; // 최댓값
		int halfPool = POOL_SIZE / 2; // 풀링 크기의 1/2
		
		max = convOut[i * POOL_OUT_SIZE + 1 + halfPool][j * POOL_OUT_SIZE + 1 + halfPool];
		for(int m = POOL_OUT_SIZE * i + 1; m <= POOL_OUT_SIZE * i + 1 + (POOL_SIZE - halfPool); m++)
			for(int n = POOL_OUT_SIZE * j + 1; n <= POOL_OUT_SIZE * j + 1 + (POOL_SIZE - halfPool); n++)
				if(max < convOut[m][n]) max = convOut[m][n];
		
		return max;
	}
	
	// 데이터 읽어들이기
	public int getData(double e[][][], int t[], ArrayList<Mat> input, int[] index)
	{
		int i=0, j=0, k=0; // 반복 제어
		
		for(i = 0; i < input.size(); i++)
		{
			t[i] = index[i];
			for(j = 0; j < input.get(i).height(); j++)
				for(k = 0; k < input.get(i).width(); k++)
					e[i][j][k] = input.get(i).get(j,k)[0];
		}
		
		return i;
	}
	
	// 데이터 표시
	public void showData(double e[][][], int t[], int n_of_e)
	{
		// 데이터 표시
		for(int i=0; i<n_of_e; i++)
		{
			System.out.println("N = " + i + " category = " + t[i]);
			for(int j=0; j<INPUT_SIZE; j++)
			{
				for(int k=0; k<INPUT_SIZE; k++)
					System.out.print(e[i][j][k]);
				System.out.println();
			}
			System.out.println();
		}
	}
	
	// 필터 초기화
	public void initFilter(double filter[][][])
	{
		for(int i=0; i<FILTER_NO; i++)
			for(int j=0; j<FILTER_SIZE; j++)
				for(int k=0; k<FILTER_SIZE; k++)
					filter[i][j][k] = drnd();
	}
	
	// 난수의 생성
	public double drnd()
	{
		Random rand = new Random();
		return rand.nextDouble() * 2 - 1; // -1 부터 1 사이의 난수 생성
	}
	
	// 전달 함수(시그모이드 함수)
	public double f(double u)
	{
		
		return 1.0 / (1.0 + Math.exp(-u));
	}
	
	// 중간층 가중치 초기화
	public void initWh(double wh[][])
	{
		for(int i=0; i<HIDDEN_NO; i++)
			for(int j=0; j<POOL_OUT_SIZE * POOL_OUT_SIZE * FILTER_NO; j++)
				wh[i][j] = drnd();
	}
	
	// 출력층 가중치 초기화
	public void initWo(double wo[])
	{
		for(int i=0; i<HIDDEN_NO + 1; i++)
			wo[i] = drnd();
	}
	
	// 순방향 계산
	public double forward(double wh[][], double wo[], double hi[], double ef[])
	{
		int i, j; // 반복 제어
		double u; // 가중치 적용 합 계산
		double o; // 출력 계산
		
		// hi 계산
		for(i = 0; i < HIDDEN_NO; i++)
		{
			u = 0; // 가중치 적용 합 구하기
			for(j = 0; j < POOL_OUT_SIZE * POOL_OUT_SIZE * FILTER_NO; j++)
				u += ef[j] * wh[i][j];
			u -= wh[i][j]; // 문턱값 처리
			hi[i] = f(u);
		}
		
		// 출력 o 계산
		o = 0;
		for(i = 0; i < HIDDEN_NO; i++)
			o += hi[i] * wo[i];
		o -= wo[i]; // 문턱값 처리
		
		return f(o);
	}
	
	// 출력층 가중치 조정
	public void oLearn(double wo[], double hi[], double ef[], double o)
	{
		int i;
		double d = (ef[POOL_OUT_SIZE * POOL_OUT_SIZE * FILTER_NO] - o) * o * (1 - o); // 오차 계산
		for(i = 0; i < HIDDEN_NO; i++)
			wo[i] += ALPHA * hi[i] * d; // 가중치 학습
		wo[i] += ALPHA * (-1.0) * d;    // 문턱값 학습
	}
	
	// 중간층 가중치 조정
	public void hLearn(double wh[][], double wo[], double hi[], double ef[], double o)
	{
		int i, j;
		double dj;
		
		for(j = 0; j < HIDDEN_NO; j++)
		{
			dj = hi[j] * (1 - hi[j]) * wo[j] * (ef[POOL_OUT_SIZE * POOL_OUT_SIZE * FILTER_NO] - o) * o * (1 - o);
			for (i = 0; i < POOL_OUT_SIZE * POOL_OUT_SIZE * FILTER_NO; i++)
				wh[j][i] += ALPHA * ef[i] * dj;
			wh[j][i] += ALPHA * (-1.0) * dj;
		}
	}
	
	// 결과 출력
	void print(double wh[][], double wo[])
	{
		for(int i = 0; i < HIDDEN_NO; i++)
			for(int j = 0; j < POOL_OUT_SIZE * POOL_OUT_SIZE * FILTER_NO; j++)
				System.out.print(wh[i][j] + " ");
		System.out.println();
		
		for(int i = 0; i < HIDDEN_NO; i++)
			System.out.print(wo[i] + " ");
		System.out.println();
	}
}
